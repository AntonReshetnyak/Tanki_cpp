#include <iostream>
#include <Windows.h>
#include <conio.h>

HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE); //getting console handle

int frame = 0; //current frame

const int field_width = 32; 
const int field_height = 32;
char field[field_height][field_width] = {
		{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','0','0','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#'},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','0','0','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#'},
		{'#','.','.','0','0','0','0','0','.','.','.','.','.','.','.','0','0','.','.','.','.','.','.','.','0','0','0','0','0','.','.','#'},
		{'#','.','.','0','.','.','.','.','.','.','.','.','.','.','.','0','0','.','.','.','.','.','.','.','.','.','.','.','0','.','.','#'},
		{'#','.','.','0','.','.','.','.','.','.','.','.','.','.','.','0','0','.','.','.','.','.','.','.','.','.','.','.','0','.','.','#'},
		{'#','.','.','0','.','.','.','.','.','.','0','.','.','.','.','0','0','.','.','.','.','0','.','.','.','.','.','.','0','.','.','#'},
		{'#','.','.','0','.','.','.','.','.','0','0','.','.','.','.','.','.','.','.','.','.','0','0','.','.','.','.','.','0','.','.','#'},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#'},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#'},
		{'#','.','.','.','.','.','0','.','.','.','.','.','.','#','.','0','0','.','#','.','.','.','.','.','.','0','.','.','.','.','.','#'},
		{'#','.','.','.','.','0','0','.','.','.','.','.','.','#','.','.','.','.','#','.','.','.','.','.','.','0','0','.','.','.','.','#'},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','#','.','.','.','.','#','.','.','.','.','.','.','.','.','.','.','.','.','#'},
		{'#','.','.','.','.','.','.','.','.','.','#','#','#','#','0','.','.','0','#','#','#','#','.','.','.','.','.','.','.','.','.','#'},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','0','0','.','.','0','0','.','.','.','.','.','.','.','.','.','.','.','.','#'},
		{'#','0','0','0','0','0','0','.','.','.','0','.','.','.','.','.','.','.','.','.','.','0','.','.','.','0','0','0','0','0','0','#'},
		{'#','0','0','0','0','0','0','.','.','.','0','.','.','.','.','.','.','.','.','.','.','0','.','.','.','0','0','0','0','0','0','#'},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','0','0','.','.','0','0','.','.','.','.','.','.','.','.','.','.','.','.','#'},
		{'#','.','.','.','.','.','.','.','.','.','#','#','#','#','0','.','.','0','#','#','#','#','.','.','.','.','.','.','.','.','.','#'},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','#','.','.','.','.','#','.','.','.','.','.','.','.','.','.','.','.','.','#'},
		{'#','.','.','.','.','0','0','.','.','.','.','.','.','#','.','.','.','.','#','.','.','.','.','.','.','.','0','0','.','.','.','#'},
		{'#','.','.','.','.','.','0','.','.','.','.','.','.','#','.','0','0','.','#','.','.','.','.','.','.','.','0','.','.','.','.','#'},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#'},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#'},
		{'#','.','.','0','.','.','.','.','.','0','0','.','.','.','.','.','.','.','.','.','.','.','0','0','.','.','.','.','0','.','.','#'},
		{'#','.','.','0','.','.','.','.','.','.','0','.','.','.','.','0','0','.','.','.','.','.','0','.','.','.','.','.','0','.','.','#'},
		{'#','.','.','0','.','.','.','.','.','.','.','.','.','.','.','0','0','.','.','.','.','.','.','.','.','.','.','.','0','.','.','#'},
		{'#','.','.','0','.','.','.','.','.','.','.','.','.','.','.','0','0','.','.','.','.','.','.','.','.','.','.','.','0','.','.','#'},
		{'#','.','.','0','0','0','0','0','.','.','.','.','.','.','.','0','0','.','.','.','.','.','.','.','0','0','0','0','0','.','.','#'},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','0','0','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#'},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','0','0','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#'},
		{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
};

enum eDirection {STOP = 0, LEFT, RIGHT, UP, DOWN}; //list of directions LEFT = 1, RIGHT = 2, UP = 3, DOWN = 4
eDirection player_direction;

class Bullet {
	int posX;
	int posY;
	char body = '*';
	int direction;

	Bullet(int Y, int X, int dir) {
		this->posY = Y;	
		this->posX = X;
		this->direction = dir;
	}

	void move() {
		if (this->direction == LEFT) {
				this->posX--;
		}
		else if (this->direction == RIGHT) {
				this->posX++;
		}
		else if (this->direction == UP) {
				this->posY--;
		}
		else if (this->direction == DOWN) {
				this->posY++;
		}
	}
};

class Player {
public:
	int posX;
	int posY;
	char body;
	int direction;

	Player(int Y, int X, int dir) {
		this->posY = Y;
		this->posX = X;
		this->direction = dir;
		setBody(dir);
	}

	void setBody(int dir) {
		if (dir == 1) {
			this->body = '<';
		}
		else if (dir == 2) {
			this->body = '>';
		}
		else if (dir == 3) {
			this->body = '^';
		}
		else if (dir == 4) {
			this->body = 'v';
		}
	}

	void move(int input) {
		if (frame % 4 == 0) {
			if (input == LEFT) {
				if (field[this->posY][this->posX - 1] == '.')
					this->posX--;
			}
			else if (input == RIGHT) {
				if (field[this->posY][this->posX + 1] == '.')
					this->posX++;
			}
			else if (input == UP) {
				if (field[this->posY - 1][this->posX] == '.')
					this->posY--;
			}
			else if (input == DOWN) {
				if (field[this->posY + 1][this->posX] == '.')
					this->posY++;
			}
		}
	}
};

void Input() {
	if (_kbhit()) { //kbhit (key button hit)
		switch (_getch ()) //geth (get character)
		{
		case 'a':
			player_direction = LEFT;
			break;
		case 'd':
			player_direction = RIGHT;
			break;
		case 's':
			player_direction = DOWN;
			break;
		case 'w':
			player_direction = UP;
			break;
		}
	}
}

template <size_t r, size_t c> //method prototype
void Draw(char (&field)[r][c]) {
	system("cls");
	for (int y = 0; y < field_height; y++) {
		for (int x = 0; x < field_width; x++) {
			//if (field[y][x] == '#') SetConsoleTextAttribute(console, 11);
			//else if (field[y][x] == '0') SetConsoleTextAttribute(console, 14);
			//else if (field[y][x] == '.') SetConsoleTextAttribute(console, 10);
			printf("%c%c", field[y][x], ' ');
			//SetConsoleTextAttribute(console, 15);
		}
		printf("\n");
	}
}

void Logic() {

}

int main() {
	Player player{ 29, 2, 2 };
	while (true) {
		Input();
		field[player.posY][player.posX] = player.body;
		Draw(field);
		field[player.posY][player.posX] = '.';
		player.setBody(player_direction);
		player.move(player_direction);
		field[player.posY][player.posX] = player.body;
		frame++;

		Sleep(25);
	}
}
